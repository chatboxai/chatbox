name: Release Windows

on:
  push:
    tags: [v\d+\.\d+\.\d+, v\d+\.\d+\.\d+-alpha\.\d+, v\d+\.\d+\.\d+-beta\.\d+]

jobs:
  publish:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2022]

    steps:
      - name: Set update channel
        run: |
          if ($env:github_ref_name -match '-beta\.\d+$') {
              echo "UPDATE_CHANNEL=beta" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          if ($env:github_ref_name -match '-alpha\.\d+$') {
              echo "UPDATE_CHANNEL=alpha" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Setup Certificate
        if: ${{ matrix.os == 'windows-2022' && env.UPDATE_CHANNEL != 'alpha' }}
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_BASE64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
        shell: bash

      - name: Set variables
        if: ${{ matrix.os == 'windows-2022' && env.UPDATE_CHANNEL != 'alpha' }}
        run: |
          echo "SM_KEYPAIR_NAME=${{ secrets.SM_KEYPAIR_ALIAS }}" >> "$GITHUB_ENV"
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH
        shell: bash

      - name: Setting up the client tools
        if: ${{ matrix.os == 'windows-2022' && env.UPDATE_CHANNEL != 'alpha' && env.SM_API_KEY != '' }}
        run: |
          curl -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi
          msiexec /i smtools-windows-x64.msi /quiet /qn
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user
        shell: cmd

      - name: Certificates Sync
        if: ${{ matrix.os == 'windows-2022' && env.UPDATE_CHANNEL != 'alpha' && env.SM_API_KEY != '' }}
        run: |
          smctl windows certsync
        shell: cmd

      - name: Publish releases
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.IFTECH_CF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.IFTECH_CF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          UPDATE_CHANNEL: ${{ env.UPDATE_CHANNEL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          npm run release:win
